package com.hniois.controller.purchase;


import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.entity.purchase.Product;

import com.hniois.service.purchase.product.ProductManage;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping(value="/product")
public class ProductAction extends BaseController{
    //用户
    @Resource(name="productService")
    private ProductManage productService;

    private String product_list = "purchase/product/product_list";
    private String product_edit = "purchase/product/product_edit";

    @RequestMapping(value="/toPage")
    public ModelAndView toPage(Page e){
        ModelAndView mv = getModelAndViewToPage(e);
        mv.setViewName(product_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return json
     * */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String list(Product e) throws Exception{
        // 当前页
        int currPage = getThisPage(e.getPage());
        // 每页显示条数
        int limit = getThisLimit(e.getLimit());

        e.setOffset((currPage-1)*limit);
        e.setPageSize(limit);
        Page page = productService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 查询List
     * @param e
     * @return json
     * */
    @RequestMapping(value="/findList")
    @ResponseBody
    public String findList(Product e) throws Exception {
        List<Product> list = productService.findList(e);
        JSONArray arr = JSONArray.fromObject(list);
        return arr.toString();
    }

    /**
     * 查询count
     * @param e
     * @return json
     * */
    @RequestMapping(value="/findCount")
    @ResponseBody
    public String findCount(Product e) throws Exception {
        Integer count = productService.findCount(e);
        return String.valueOf(count);
    }

    /**
     * 查询
     * @param e
     * @return json
     * */
    @RequestMapping(value="/find")
    @ResponseBody
    public String find(Product e) throws Exception {
        Product m = productService.find(e);
        JSONObject obj = JSONObject.fromObject(m);
        return obj.toString();
    }


    /**
     * 新增 or 保存页面
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView toAorU(Product e) throws Exception{
        ModelAndView mv = this.getModelAndView();
        Product product = new Product();
        if(StringUtils.isNotEmpty(e.getId())){
            product = productService.find(e);
        }
        product.setCode(e.getCode());//判断：0查询 or 1 增加/修改
        mv.addObject("product",product);
        mv.setViewName(product_edit);
        return mv;
    }

    /**
     * 保存
     * @param e
     * @return json
     * */
    @RequestMapping(value="/add")
    @ResponseBody
    public String add(Product e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        Product p = new Product();
        p.setPro_id(e.getPro_id());
        //条件判断
        if(productService.findCount(p)>0){
            setMsg(obj,"error","数据已存在!");
        }else{
            productService.save(e);
        }
        return obj.toString();
    }

    /**
     * 修改
     * @param e
     * @return json
     * */
    @RequestMapping(value="/update")
    @ResponseBody
    public String update(Product e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        Product p = new Product();
        p.setPro_id(e.getPro_id());
        //条件判断
        List<Product> list = productService.findList(p);
        if(list != null && list.size() > 0 && !(list.get(0).getPro_id().equals(e.getPro_id()))){
            setMsg(obj,"error","操作失败!");
        }else{
            productService.update(e);
        }
        return obj.toString();
    }

    /**
     * 删除
     * @param e
     * @return json
     * */
    @RequestMapping(value="/delete")
    @ResponseBody
    public String delete(Product e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        productService.delete(e);
        return obj.toString();
    }

    /**
     * 删除
     * @param e
     * @return json
     * */
    @RequestMapping(value="/deletes")
    @ResponseBody
    public String deletes(Product e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        productService.deleteBatch(e);
        return obj.toString();
    }

}
