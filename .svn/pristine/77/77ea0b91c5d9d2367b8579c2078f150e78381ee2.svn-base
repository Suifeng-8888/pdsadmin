package com.hniois.controller.upload;

import com.hniois.controller.base.BaseController;
import net.sf.json.JSONObject;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * 文件上传/下载
 * */
@Controller
@RequestMapping(value="/file")
public class FileAction extends BaseController {

    /**
     *文件上传
     * @param request
     * @return json {"state","ok","message":"成功","url":"[文件路径]","fileName":"[文件名]"}
     * */
    @RequestMapping("upload")
    @ResponseBody
    public String upload(HttpServletRequest request, HttpServletResponse response){
        response.setContentType("text/html; charset=UTF-8");
        //JSONObject r = JSONObject.fromObject("{\"state\":\"err\",\"message\":\"上传失败\"}");
        JSONObject r=JSONObject.fromObject("{'state':'error','message':'上传失败'}");
        //文件保存目录路径
        String savePath = request.getRealPath("/") + "attached/";
        //文件保存目录URL
        String saveUrl  = request.getContextPath() + "attached/";
        //检查文件判断提交上来的数据是否是上传表单的数据
        if(!ServletFileUpload.isMultipartContent(request)){
            r.put("message","请选择文件");
            return r.toString();
        }
        //检查目录
        File uploadDir = new File(savePath);
        if(!uploadDir.isDirectory()) {
            uploadDir.mkdirs();
        }
        //检查目录写权限
        if(!uploadDir.canWrite()){
            r.put("message","上传目录没有写权限。");
            return r.toString();
        }

        //创建文件夹
        savePath += "file/" ;
        saveUrl += "file/" ;
        File saveDirFile = new File(savePath);
        if (!saveDirFile.exists()) {
            saveDirFile.mkdirs();
        }
        String ymd = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
        savePath += ymd + "/";
        saveUrl += ymd + "/";
        File dirFile = new File(savePath);
        if (!dirFile.exists()) {
            dirFile.mkdirs();
        }
        //使用Apache文件上传组件处理文件上传步骤：
        //1、创建一个DiskFileItemFactory工厂
        FileItemFactory factory = new DiskFileItemFactory();
        //2、创建一个文件上传解析器
        ServletFileUpload upload = new ServletFileUpload(factory);
        //解决上传文件名的中文乱码
        upload.setHeaderEncoding("UTF-8");
        try {
            MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
            List<MultipartFile> items = multipartRequest.getFiles("file");
            String url[] = new String[items.size()];
            String fileNames[] = new String[items.size()];
            int i = 0;
            //List items = upload.parseRequest(request);
            for (MultipartFile item : items) {
                if(!item.isEmpty()){
                    //最大文件大小
                    long maxSize = 2097152;//1024*1024*2
                    //检查文件大小
                    if (item.getSize() > maxSize) {
                        r.put("message", "上传文件大小超过限制。");
                        return r.toString();
                    }

                    //检查扩展名
                    String fileName = item.getOriginalFilename();

                    try {
                        File uploadedFile = new File(savePath, fileName);
                        item.transferTo(uploadedFile);
                    } catch (Exception e) {
                        r.put("message", "上传文件失败。");
                        return r.toString();
                    }
                    fileNames[i] = fileName;
                    url[i++] = saveUrl + fileName;

                }
            }
            r.put("fileName", fileNames);//全路径
            r.put("url", url);//全路径
            r.put("state","ok");
            r.put("message","上传成功");
        }catch (Exception e){
            e.printStackTrace();
        }
        return r.toString();
    }

    /**
     *文件下载
     * @param path 文件路径
     * @return HttpServletResponse
     * */
    @RequestMapping("download")
    @ResponseBody
    public void download(HttpServletRequest request, HttpServletResponse response,String path) {
        InputStream fis = null;
        try {
            path = request.getRealPath("/") + path;
            // path是指欲下载的文件的路径。
            File file = new File(path);
            // 取得文件名。
            String filename = file.getName();
            fis = new BufferedInputStream(new FileInputStream(path));
            // 以流的形式下载文件。

            byte[] buffer = new byte[fis.available()];
            fis.read(buffer);
            fis.close();
            // 清空response
            response.reset();
            // 设置response的Header
            response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes()));
            response.addHeader("Content-Length", "" + file.length());
            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
            response.setContentType("application/octet-stream");
            toClient.write(buffer);
            toClient.flush();
            toClient.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
