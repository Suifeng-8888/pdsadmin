package com.hniois.controller.report;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.entity.item.Item;
import com.hniois.entity.norm.Norm;
import com.hniois.entity.norm.NormDetail;
import com.hniois.entity.report.Report;
import com.hniois.entity.report.ReportDetail;
import com.hniois.service.item.ItemManage;
import com.hniois.service.norm.NormDetailService;
import com.hniois.service.norm.NormService;
import com.hniois.service.report.ReportDetailService;
import com.hniois.service.report.ReportService;
import com.hniois.util.SessionManager;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 *  检测报告    Action
 */
@Controller
@RequestMapping(value = "/report")
public class ReportAction extends BaseController {

    @Resource(name = "reportService")
    private ReportService reportService;

    @Resource(name = "itemService")
    private ItemManage itemService;

    @Resource(name = "normService")
    private NormService normService;

    @Resource(name = "reportDetailService")
    private ReportDetailService reportDetailService;

    @Resource(name = "normDetailService")
    private NormDetailService normDetailService;

    private String list = "report/report_list";
    private String edit = "report/report_edit";

    //新增仪器弹框页面
    private String mach_table="report/mach_table";

    /**
     * 进入检测报告页面
     * @return
     */
    @RequestMapping(value = "/toPage")
    public ModelAndView toPage(Page page) {
        ModelAndView mv = getModelAndViewToPage(page);
        mv.setViewName(list);
        return mv;
    }

    /**
     * 检测报告分页列表
     * @param report
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String pageList(Report report) throws Exception {
        // 当前页
        int currPage = getThisPage(report.getPage());
        // 每页显示条数
        int limit = getThisLimit(report.getLimit());
        report.setOffset((currPage-1) * limit);
        report.setPageSize(limit);
        Page page = reportService.findPage(report);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 修改    页面
     * @param e
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView addORUpd(Report e) throws Exception {
        ModelAndView mv = getModelAndView();
        Report report = new Report();
        if (StringUtils.isNotEmpty(e.getRecord_id())) {
            report = reportService.find(e);
        }
        report.setCode(e.getCode());  // 判断：0查看 or 1 增加/修改
        mv.setViewName(edit);
        Item item = new Item();
        item.setState("0");
        item.setChecked("0");
        List<Item> items = itemService.findList(item);
        List<Norm> norms = normService.findList(new Norm());
        mv.addObject("items",items);
        mv.addObject("norms", norms);
        mv.addObject("report", report);
        return mv;
    }

    /**
     *  添加
     * @param report
     * @return
     */
    @RequestMapping(value="/add")
    @ResponseBody
    public String add(Report report) {
        JSONObject obj = getMsg();//返回信息
        try {
            reportService.save(report);
            NormDetail normDetail = new NormDetail();
            normDetail.setNorm_id(report.getNorm_id().toString());
            normDetail.setDetail_object(report.getSpecimen_name());
            List<NormDetail> normDetails = normDetailService.findList(normDetail);
            List<ReportDetail> reportDetails = new ArrayList<ReportDetail>();
            if (normDetails.size() > 0) {
                for (NormDetail nd: normDetails){
                    ReportDetail reportDetail = new ReportDetail();
                    reportDetail.setRecord_id(report.getRecord_id());
                    reportDetail.setDetection_item(nd.getDetail_options());
                    reportDetail.setNorm_claim(nd.getDetail_value());
                    reportDetail.setDetection_limit(nd.getValue_updown());
                    reportDetails.add(reportDetail);
                }
                reportDetailService.saveBatch(reportDetails);
            }
        } catch (Exception e) {
            setMsg(obj,"error","添加失败!");
            e.printStackTrace();
        }
        return obj.toString();
    }

    /**
     *  更新
     * @param report
     * @return
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public String update(Report report) {
        JSONObject obj = getMsg();//返回信息 默认成功
        try {
            reportService.update(report);
        } catch (Exception e) {
            setMsg(obj,"error","更新失败!");
            e.printStackTrace();
        }
        return obj.toString();
    }

    /**
     * 删除
     * @param report
     * @return
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public String delete(Report report) {
        JSONObject obj = getMsg();//返回信息 默认成功
        try {
            if (report.getRecord_id() != null) {
                reportService.delete(report);
            } else {
                setMsg(obj,"error","参数不能为空!");
            }
        } catch (Exception e) {
            setMsg(obj,"error","删除失败!");
            e.printStackTrace();
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param report
     * @return
     */
    @RequestMapping(value = "/deletes")
    @ResponseBody
    public String deletes(Report report) {
        JSONObject obj = getMsg();//返回信息 默认成功
        try {
            if(report.getData() != null) {
                reportService.deleteBatch(report);
            } else {
                setMsg(obj,"error","参数不能为空!");
            }
        } catch (Exception e) {
            setMsg(obj,"error","删除失败!");
            e.printStackTrace();
        }
        return obj.toString();
    }

    /**
     * 查询List
     * @param report
     * @return
     */
    @RequestMapping(value="/findList")
    @ResponseBody
    public String findList(Report report) {
        List<Report> list = null;
        try {
            list = reportService.findList(report);
        } catch (Exception e) {
            e.printStackTrace();
        }
        JSONArray arr = JSONArray.fromObject(list);
        return arr.toString();
    }

    /**
     *  报告审核
     * @param report
     * @return
     */
    @RequestMapping(value = "/upaudit")
    @ResponseBody
    public String upAudit(Report report) {
        JSONObject obj = getMsg();//返回信息 默认成功
        try {
            if (report.getData() != null) {
                String userName = SessionManager.getUsername();
                report.setAuditor(userName);
                reportService.updateBatch(report);
            } else {
                setMsg(obj,"error","参数不能为空!");
            }
        } catch (Exception e) {
            setMsg(obj,"error","审核失败!");
            e.printStackTrace();
        }
        return obj.toString();
    }

    //选择所用仪器
    @RequestMapping("/choose")
    public ModelAndView chose(){
        ModelAndView mv=this.getModelAndView();
        mv.setViewName(mach_table);
        return mv;
    }
}
