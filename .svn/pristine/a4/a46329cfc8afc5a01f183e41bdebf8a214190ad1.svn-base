package com.hniois.controller.search;



import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;

import com.hniois.controller.base.BaseController;
import com.hniois.entity.search.Search;
import com.hniois.service.search.SearchManage;
import com.hniois.util.Const;
import com.hniois.util.FileUpload;
import com.hniois.util.sign.Base64Test;
import com.hniois.util.sign.UploadPicture;
import net.sf.json.JSONObject;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.List;

import static com.hniois.util.sign.Base64Test.GenerateImage;

@Controller
@RequestMapping(value="/search")
public class SearchAction extends BaseController {
    @Resource(name="searchService")
    private SearchManage  searchService;
    private String search_list = "search/search_list";
    private String sign = "sign/sign";
    private String upload = "sign/upload";
    @RequestMapping(value="/toPage")
    public ModelAndView toPage(Page e){
        ModelAndView mv = getModelAndViewToPage(e);
        mv.setViewName(search_list);
        return mv;
    }

    @RequestMapping(value="/toSign")
    public ModelAndView sign(Page e){
        ModelAndView mv = getModelAndViewToPage(e);
        mv.setViewName(sign);
        return mv;
    }
    //解码并生成图片保存
    @RequestMapping("tojson.do")
    public String tojson(String lines){
        String b=lines;
        b=b.replace("data:image/png;base64,","");

        GenerateImage(b);

        return "sign/sign_list";
    }


    //上传页面
    @RequestMapping(value="/toUpload")
    public ModelAndView upload(Page e){
        ModelAndView mv = getModelAndViewToPage(e);
        mv.setViewName(upload);
        return mv;
    }

//
//    private String uploadPath = "D:\\tupian"; // 上传文件的目录
//    File tempPathFile;
//    @RequestMapping("saveImage")
//    public void uploadImg(Long classesId,HttpServletRequest request) throws Exception{
//        try {
//
//            // Create a factory for disk-based file items
//            DiskFileItemFactory factory = new DiskFileItemFactory();
//
//            // Set factory constraints
//            factory.setSizeThreshold(4096); // 设置缓冲区大小，这里是4kb
//            factory.setRepository(tempPathFile);// 设置缓冲区目录
//
//            // Create a new file upload handler
//            ServletFileUpload upload = new ServletFileUpload(factory);
//
//            // Set overall request size constraint
//            upload.setSizeMax(4194304); // 设置最大文件尺寸，这里是4MB
//
//            List<FileItem> items = upload.parseRequest(request);// 得到所有的文件
//
//            System.out.println(items.size());
//            Iterator<FileItem> i = items.iterator();
//            while (i.hasNext()) {
//                FileItem fi = (FileItem) i.next();
//                String fileName = fi.getName();
//                if (fileName != null) {
//                    File fullFile = new File(new String(fi.getName().getBytes(), "utf-8")); // 解决文件名乱码问题
//                    File savedFile = new File(uploadPath, fullFile.getName());
//                    fi.write(savedFile);
//                }
//            }
//            System.out.print("上传成功！");
//        } catch (Exception e) {
//
//        }
//    }
//    @RequestMapping(value = "saveImage")
//    @ResponseBody
//    public String saveImage( MultipartFile file, HttpServletRequest request)
//            {
//        // 上传的图片只允许是 png 或者jpg 中的格式
//        if (file.getOriginalFilename().contains(".png") || file.getOriginalFilename().contains(".jpg")) {
//            System.out.println("good==============================================================");
//            // 根据相对路径转化为真实路径
//            String rootpath = request.getSession().getServletContext().getRealPath(File.separator);// 获得web应用的绝对路径
//            File createFile = new File(rootpath + "/image/");
//            if (!createFile.exists()) {// 判断文件是否存在如果不存在则自动创建文件夹
//                createFile.mkdir();
//            }
//            //String uuid = IdGen.uuid() + "_";// 随机生成一个唯一性的id 确保apk文件重名
//            File f = new File(rootpath + "/image/"+ file.getOriginalFilename());
//            if(f.exists()){//上传的文件已经存在,则提示用户重新上传 apk 或者重命名
//                return "文件已经存在,请重新上传或者重命名" ;
//            }
//            else{
//                System.out.println(rootpath);
//                System.out.println("************=============================================================="+rootpath);
//               // file.transferTo(f); // 将上传的文件写入到系统中
//                return "/image/" + file.getOriginalFilename();
//            }
//        } else {
//
//            return "上传文件失败";
//        }
//    }


    //执行上传页面
//    @RequestMapping("/upload")
//    @ResponseBody
//    public JSONObject upload(DefaultMultipartHttpServletRequest multipartRequest, HttpServletRequest request) {
//        JSONObject json = new JSONObject();
//        json.setSuccess(true);
//        if (multipartRequest != null) {
//            Iterator<String> iterator = multipartRequest.getFileNames();
//            while (iterator.hasNext()) {
//                MultipartFile file = multipartRequest.getFile((String) iterator.next());
//                if (!file.isEmpty()) {
//                    log.debug("获取文件MIME类型-" + file.getContentType());// 获取文件MIME类型
//
//                    log.debug("获取表单中文件组件的名字-" + file.getName());// 获取表单中文件组件的名字
//
//                    log.debug("获取上传文件的原名-" + file.getOriginalFilename());// 获取上传文件的原名
//
//                    log.debug("获取文件的字节大小，单位byte-" + file.getSize());// 获取文件的字节大小，单位byte
//
//                    String fileName = UUID.randomUUID().toString().replaceAll("-", "")
//                            + file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));// 保存后的文件名
//                    log.info(fileName);
//
//                    try {
//                        // 文件保存路径
//                        String filePath = request.getServletContext().getRealPath("/") + "attached" + File.separator;
//                        json.setMsg("上传成功，请查看【" + filePath + "】目录");
//                        File uploadFile = new File(filePath + fileName);
//                        uploadFile.mkdirs();
//                        file.transferTo(uploadFile);// 保存到一个目标文件中。
//                        Map<String, Object> m = new HashMap<String, Object>();
//                        m.put("fileUrl", "/attached/" + fileName);
//                        json.setObj(m);
//                    } catch (Exception e) {
//                        json.setSuccess(false);
//                        json.setMsg(e.getLocalizedMessage());
//                        e.printStackTrace();
//                    }
//                }
//            }
//        }
//        return json;
//    }

    @RequestMapping(value = "saveImage")
    @ResponseBody
    public Map<String ,Object> image(MultipartFile file, HttpServletRequest request)
    {
        Map<String ,Object> map=new HashMap<String, Object>();
        try {

            String path="D:\\tupian";;
            //System.out.println(path+"==================================================");
            System.out.println(file+"==================================================");
            String image= UploadPicture.uploadPicture(file,path);
            map.put("code",0);
            map.put("image",image);
        } catch (IOException e) {
            map.put("code",1);
            e.printStackTrace();
        }
        return map;
    }


    /**
     * 分页查询
     * @param e
     * @return json
     * */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String list(Search e) throws Exception{
        // 当前页
        int currPage = getThisPage(e.getPage());
        // 每页显示条数
        int limit = getThisLimit(e.getLimit());

        e.setOffset((currPage-1)*limit);
        e.setPageSize(limit);
        Page page = searchService.findPage(e);
        return JSON.toJSONString(page);
    }





}
