package com.hniois.controller.machine;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.entity.machine.Record;
import com.hniois.service.machine.record.RecordManage;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

/**
 * 仪器使用记录
 */
@Controller
@RequestMapping("/record")
public class RecordAction extends BaseController {

    @Resource(name = "recordService")
    private RecordManage recordService;
    private String record_list="machine/record/record_list";
    private String record_edit="machine/record/record_edit";


    @RequestMapping("/toPage")
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(record_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @RequestMapping("/list")
    @ResponseBody
    public String list(Record e) throws Exception{
       //获取当前页
       int currPage=getThisPage(e.getPage());
       int limit=getThisLimit(e.getLimit());
       e.setOffset((currPage-1)*limit);
       e.setPageSize(limit);
        Page  page=recordService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 查询list
     * @param e
     * @return
     */
    @RequestMapping("/findlist")
    @ResponseBody
    public String findlist(Record e) throws Exception{
        List<Record> list= recordService.findList(e);
        net.sf.json.JSONArray js= net.sf.json.JSONArray.fromObject(list);
        return js.toString();
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Record e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Record record=new Record();
        if(StringUtils.isNotEmpty(e.getRecord_id())){
            record=recordService.find(e);
        }
        record.setCode(e.getCode());
        mv.addObject("record",record);
        mv.setViewName(record_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Record e)throws  Exception{
        JSONObject obj=getMsg();
        //先判断数据库是否已经存在当前对象
        Record red=new Record();
        red.setRecord_id(e.getRecord_id());
        if(recordService.findCount(red)>0){
            setMsg(obj,"error","当前对象已存在");
        }else{
            recordService.save(e);
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Record e){
        JSONObject obj=getMsg();
        try{
            recordService.update(e);
        }catch(Exception ex){
            setMsg(obj,"error","编辑失败");
        }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Record e)throws Exception{
        JSONObject obj=getMsg();

        if(e!=null) {
            recordService.delete(e);
        }else {
            setMsg(obj, "error", "请选择要删除的数据");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Record e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            recordService.deleteBatch(e);
        }else{
            setMsg(obj,"error","请选择要删除的数据");
        }
        return obj.toString();
    }
}
