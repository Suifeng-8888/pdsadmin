package com.hniois.controller.item;

import com.alibaba.fastjson.JSON;
import com.hniois.entity.send.SendCheck;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.UuidUtil;
import net.sf.json.JSONArray;

import net.sf.json.JSONObject;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.entity.item.Item;
import com.hniois.service.item.ItemManage;
import org.apache.commons.lang.StringUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.servlet.ServletUtilities;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.awt.*;
import java.io.File;
import java.io.FileOutputStream;
import java.text.NumberFormat;
import java.util.List;

@Controller
@RequestMapping("/item")
public class ItemAction extends BaseController {
    //样品
    @Resource(name = "itemService")
    private ItemManage itemService;

    private String item_list = "item/item_list";
    private String item_edit = "item/item_edit";

    private String send_check="item/send_check";

    @RequestMapping("/toPage")
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(item_list);
        return mv;
    }

    /**
     * 分页查询
     */

    @RequestMapping(value="/list")
    @ResponseBody
    public String list(Item e) throws Exception{
        //获取当前页面
        int currPage=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        //重新设置对象中分页信息的偏移量和每页显示条数
        e.setOffset((currPage-1)*limit);
        e.setPageSize(limit);
        Page page=itemService.findPage(e);
        return JSON.toJSONString(page);
    }


    /**
     * 新增or编辑页面
     * @return
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView edit(Item e) throws Exception{
        ModelAndView mv=this.getModelAndView();
        Item item=new Item();

        if(StringUtils.isNotEmpty(e.getId())){
            item=itemService.find(e);
        }
        item.setCode(e.getCode());
        mv.addObject("item",item);
        mv.setViewName(item_edit);
        return mv;
    }


    /**
     * 保存新增
     */
    @RequestMapping(value = "/add")
    @ResponseBody
    public String add(Item e) throws Exception{
        JSONObject obj= getMsg();//返回信息
        Item item=new Item();
        String itemId=UuidUtil.get32UUID();
        item.setItemid(itemId);
        //判断当前对象是否已经存在
        if(itemService.findCount(item)>0){
            setMsg(obj,"error","当前对象存在!");
        }else{
            e.setItemid(itemId);
            itemService.save(e);
        }
            return obj.toString();
    }

    /**
     * 保存编辑
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Item e){
       net.sf.json.JSONObject obj=getMsg();
        try {
            itemService.update(e);

        }catch (Exception ex){
            setMsg(obj,"failed","编辑失败");
        }

        return obj.toString();
    }

    /**
     * 删除数据
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Item e)throws Exception{
        net.sf.json.JSONObject obj=getMsg();
        if(e!=null){
            itemService.delete(e);
        }else{
            setMsg(obj,"delete failed","删除失败!");
        }

        return obj.toString();
    }

    /**
     * 批量删除数据
     * @param e
     * @return
     * @throws Exception
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Item e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData()!=null){

            itemService.deleteBatch(e);
        }else{
            setMsg(obj,"delete failed","删除失败!");
        }
        return obj.toString();
    }

    /**
     * 获取送检样品信息
     * @param e
     * @return
     */
    @RequestMapping("/sendCheck")
    public ModelAndView send(Item e) throws Exception{
        ModelAndView mv=this.getModelAndView();
        //获取所有要送检的样品信息
       List<Item> list=itemService.sendCheck(e);
       //根据样品信息获取要送检的对象
       SendCheck send=itemService.getSend(list);
        mv.addObject("send",send);
        mv.setViewName(send_check);
        return mv;
    }


    /**
     * 查询List
     * @param e
     * @return json
     * */
    @RequestMapping(value="/findList")
    @ResponseBody
    public String findList(Item e) throws Exception {
        List<Item> list = itemService.findList(e);
        JSONArray arr = JSONArray.fromObject(list);
        return arr.toString();
    }

    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Item e) throws Exception {
        //导出工具
        ExportExcelUtil<Item> export = new ExportExcelUtil<Item>();
        //文件名称
        String filename = "ItemList" + DateUtil.getTimes();
        //导出数据信息
        List list = itemService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }


    /**
     * 生成饼状图形报表
     */
//    @RequestMapping("/bar")
//    public String createPie()throws Exception{
//        JSONObject obj=getMsg();
//        //创建数据集合
//        DefaultPieDataset dataset=new DefaultPieDataset();
//        List<Item> list = itemService.findList(new Item());
//        //获取检测样品名和检测的次数
//        for(Item it:list){
//            dataset.setValue(it.getItemname(),Double.parseDouble(it.getNum()));
//        }
        /*
         * 解决字体乱码（在创建图表之前设定）
         */
//        StandardChartTheme standardChartTheme = new StandardChartTheme("CN");
//        standardChartTheme.setExtraLargeFont(new Font("隶书", Font.BOLD, 20));
//        standardChartTheme.setRegularFont(new Font("宋书", Font.PLAIN, 15));
//        standardChartTheme.setLargeFont(new Font("宋书", Font.PLAIN, 15));
//        ChartFactory.setChartTheme(standardChartTheme);

        //调用工厂方法生成柱状图
//        JFreeChart chart= ChartFactory.createPieChart("平顶山农检样品比率",dataset,true,true,false);
//
//        // 副标题
//        chart.addSubtitle(new TextTitle(list.get(0).getSend_time().substring(0,4)+"年度"));
//
//        PiePlot pieplot=(PiePlot)chart.getPlot();
//        pieplot.setLabelFont(new Font("宋体",0,11));
//        // 设置饼图是圆的（true），还是椭圆的（false）；默认为true
//        pieplot.setCircular(true);
//        // 没有数据的时候显示的内容
//        pieplot.setNoDataMessage("无数据显示");
//        StandardPieSectionLabelGenerator standarPieIG = new StandardPieSectionLabelGenerator("{0}:({1}.{2})", NumberFormat.getNumberInstance(), NumberFormat.getPercentInstance());
//        pieplot.setLabelGenerator(standarPieIG);
//        //把制定KEY的数据切开显示，只在2D有效
//        //pieplot.setExplodePercent("JAVA",0.23);
//        //确定图片输出位置及名称
//        FileOutputStream out=new FileOutputStream(new File("d:\\pie1.jpg"));
//        //使用chartUtil工具类输出
//        ChartUtils.writeChartAsJPEG(out,chart,700,500);
//        return obj.toString();
//    }
}
